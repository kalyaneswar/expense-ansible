- name: Backend server configure
  hosts: backend
  become: yes
  vars:
    username: expense
    login_host: db.kalyaneswar.online
    login_password: ExpenseApp@1

  tasks:
  - name: disable nodeJS
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enable nodeJS
    ansible.builtin.command: dnf module enable nodejs:20 -y
  
  - name: Install nodeJS
    ansible.builtin.dnf:
      name: "{{ item }}"
      state: latest
    loop:
    - nodejs
    - mysql


  - name: Check if the user exists
    ansible.builtin.command: id {{ username }}
    register: check_user
    ignore_errors: yes

  - name: Add the user if it doesn't exist
    ansible.builtin.user:
      name: "{{ username }}"
        # Define other user parameters here
      state: present
    when: check_user.rc != 0

  - name: Create app directory if it does not exist
    ansible.builtin.file:
      path: /app
      state: directory
  
  - name: Download backend code
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip

  - name: Unzip backend code
    ansible.builtin.unarchive:
      src: /tmp/backend.zip # by default it will check in ansible server
      dest: /app
      remote_src: yes

  - name: Install dependencies
    ansible.builtin.command: npm install
    args:
      chdir: /app
    
  - name: Copy backend service from ansible to remote(Backend)
    ansible.builtin.copy:
      src: backend.service
      dest: /etc/systemd/system/backend.service

  - name: import data into mysql
    community.mysql.mysql_db:
      login_user: root
      login_password: {{ login_password }}
      login_host: {{ login_host }}
      target: /app/schema/backend.sql
      state: import
      name: all

  - name: demon reload
    ansible.builtin.systemd_service:
      daemon_reload: true

  
  - name: start and enable backend services
    ansible.builtin.systemd_service:
      name: backend
      daemon_reload: true
      state: started
      enabled: true
